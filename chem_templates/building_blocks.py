# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_building_blocks.ipynb.

# %% auto 0
__all__ = ['BB_CLASS_NAMES', 'BB_CLASSES', 'BuildingBlockSchema', 'BuildingBlockClass', 'ReactionUniverse', 'BuildingBlock']

# %% ../nbs/06_building_blocks.ipynb 3
from .imports import *
from .utils import *
from .chem import Molecule
from rdkit import Chem

# %% ../nbs/06_building_blocks.ipynb 4
class BuildingBlockSchema():
    def __init__(self, 
                 name:              str, 
                 smarts_match_any:  list[str], 
                 smarts_match_all:  list[str], 
                 smarts_match_none: list[str]):
        
        self.name = name
        
        self.smarts_match_any = smarts_match_any
        self.smarts_match_any_mols = [Chem.MolFromSmarts(i) for i in smarts_match_any]
        
        self.smarts_match_all = smarts_match_all
        self.smarts_match_all_mols = [Chem.MolFromSmarts(i) for i in smarts_match_all]
        
        self.smarts_match_none = smarts_match_none
        self.smarts_match_none_mols = [Chem.MolFromSmarts(i) for i in smarts_match_none]
        
    def _check_match_any(self, mol: Chem.Mol) -> bool:
        for substruct in self.smarts_match_any_mols:
            if mol.HasSubstructMatch(substruct):
                return True
        return False
    
    def _check_match_all(self, mol: Chem.Mol) -> bool:
        for substruct in self.smarts_match_all_mols:
            if not mol.HasSubstructMatch(substruct):
                return False
        return True
    
    def _check_match_none(self, mol: Chem.Mol) -> bool:
        for substruct in self.smarts_match_none_mols:
            if mol.HasSubstructMatch(substruct):
                return False
        return True
        
    def match(self, mol: Chem.Mol) -> bool:
        return self._check_match_any(mol) and self._check_match_all(mol) and self._check_match_none(mol)
    
    @classmethod
    def from_dict(cls, input_dict: dict):
        '''
        input_dict = {
            'schema_name' : '',
            'smarts_match_any' : [...],
            'smarts_match_all' : [...],
            'smarts_match_none' : [...]
            }
        '''
        return cls(input_dict['schema_name'], 
                   input_dict['smarts_match_any'], 
                   input_dict['smarts_match_all'], 
                   input_dict['smarts_match_none'])
    
    @classmethod
    def from_file(cls, filename):
        with open(filename, 'r') as f:
            input_dict = json.load(f)
            return cls.from_dict(input_dict)
    
    def dump(self):
        return {
            'schema_name' : self.name,
            'smarts_match_any' : self.smarts_match_any,
            'smarts_match_all' : self.smarts_match_all,
            'smarts_match_none' : self.smarts_match_none
        }
    
    def __repr__(self) -> str:
        return self.name

# %% ../nbs/06_building_blocks.ipynb 6
class BuildingBlockClass():
    def __init__(self, 
                 name:    str, 
                 schemas: list[BuildingBlockSchema]):
        
        self.name = name
        self.schemas = schemas
        
    def match(self, mol: Chem.Mol) -> dict:
        output = {}
        for schema in self.schemas:
            if schema.match(mol):
                output[schema.name] = schema
                
        if output:
            output = {self.name : output}
            
        return output
    
    def add_schema(self, schema: BuildingBlockSchema):
        self.schemas.append(schema)
    
    @classmethod
    def from_dict(cls, input_dict: dict):
        '''
        input_dict = {
            'class_name' : '',
            'schemas' : [
                    {'schema_name' : '',
                    'smarts_match_any' : [...],
                    'smarts_match_all' : [...],
                    'smarts_match_none' : [...]},
                    ]
            }
        '''
        
        schemas = [BuildingBlockSchema.from_dict(i) for i in input_dict['schemas']]
        return cls(input_dict['class_name'], schemas)
    
    @classmethod
    def from_file(cls, filename):
        with open(filename, 'r') as f:
            input_dict = json.load(f)
            return cls.from_dict(input_dict)
    
    def dump(self):
        return {'class_name' : self.name, 'schemas' : [i.dump() for i in self.schemas]}
    
    def __repr__(self) -> str:
        return f"{self.name}: {', '.join([i.name for i in self.schemas])}"

# %% ../nbs/06_building_blocks.ipynb 7
BB_CLASS_NAMES = [
        'SecondaryAmines',
        'Acylhalides',
        'SulfonesSulfinates',
        'Reagents',
        'Bifunctional',
        'ArylHalide',
        'Anhydrides',
        'Boronics',
        'Alkenes',
        'Acetylenes',
        'AlkylHalides',
        'Aldehyde',
        'Ketones',
        'Amides',
        'TertiaryAmines',
        'ElementOrganics',
        'SulfonylHalides',
        'PrimaryAmines',
        'Trifunctional',
        'Alcohols',
        'nHAzoles',
        'Azides',
        'Esters',
        'Aminoacids',
        'Acid',
        'ReagentsForOlefination'
]

BB_CLASSES = {i : BuildingBlockClass.from_file(f'building_block_schemas/{i}.json') for i in BB_CLASS_NAMES}

# %% ../nbs/06_building_blocks.ipynb 9
class ReactionUniverse():
    def __init__(self, 
                 universe_name: str, 
                 building_block_classes: list[BuildingBlockClass]):
        self.universe_name = universe_name
        self.building_block_classes = building_block_classes
        self.building_block_class_dict = {i.name : i for i in self.building_block_classes}
        
    def add_class(self, bb_class: BuildingBlockClass):
        self.building_block_classes.append(bb_class)
        self.building_block_class_dict[bb_class.name] = bb_class
        
    @classmethod
    def from_dict(cls, input_dict: dict):
        '''
        input_dict = {
            'universe_name' : '',
            'building_block_classes' : [
                {
                'class_name' : '',
                'schemas' : [
                        {'schema_name' : '',
                        'smarts_match_any' : [...],
                        'smarts_match_all' : [...],
                        'smarts_match_none' : [...]},
                        ]
                }
            ]
        }
        '''
        name = input_dict['universe_name']
        building_block_classes = [BuildingBlockClass.from_dict(i) for i in input_dict['building_block_classes']]
        return cls(name, building_block_classes)
        
    @classmethod
    def from_file(cls, filename):
        with open(filename, 'r') as f:
            input_dict = json.load(f)
            return cls.from_dict(input_dict)
        
    def dump(self):
        return {'universe_name' : self.universe_name, 
                'building_block_classes' : [i.dump() for i in self.building_block_classes]}
        
    def match(self, mol: Chem.Mol) -> dict:
        return {k: v for d in [i.match(mol) for i in self.building_block_classes] for k, v in d.items()}

# %% ../nbs/06_building_blocks.ipynb 11
class BuildingBlock(Molecule):
    def __init__(self, 
                 smile: str, 
                 data:  Optional[dict]=None):
        super().__init__(smile, data)
        
    def match_schema(self, schema: BuildingBlockSchema) -> bool:
        return schema.match(self.mol)
    
    def match_class(self, bb_class: BuildingBlockClass) -> dict:
        return bb_class.match(self.mol)
    
    def match_universe(self, rxn_universe: ReactionUniverse) -> dict:
        return rxn_universe.match(self.mol)
    
    def classify(self, rxn_universe: ReactionUniverse) -> dict:
        matches = self.match_universe(rxn_universe)
        self.add_data({rxn_universe.universe_name : matches})
        return matches
