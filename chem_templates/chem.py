# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_chem.ipynb.

# %% auto 0
__all__ = ['to_mol', 'to_smile', 'to_kekule', 'canon_smile', 'remove_stereo', 'Molecule', 'Reaction']

# %% ../nbs/01_chem.ipynb 3
from .imports import *
from .utils import *
import rdkit
from rdkit import Chem

# %% ../nbs/01_chem.ipynb 5
def to_mol(smile):
    if (type(smile) == str) or (type(smile) == np.str_):
        mol = Chem.MolFromSmiles(smile)
        if mol is not None:
            try:
                Chem.SanitizeMol(mol)
            except:
                mol = None
    else:
        mol = smile
        
    return mol

def to_smile(mol):
    
    if type(mol)==Chem.Mol:
        smile = Chem.MolToSmiles(mol)
    else:
        smile = mol
        
    return smile

def to_kekule(smile):
    
    return Chem.MolToSmiles(to_mol(smile), kekuleSmiles=True)

def canon_smile(smile):
    try:
        return Chem.CanonSmiles(smile)
    except:
        return ''

def remove_stereo(smile):
    smile = to_smile(smile)
    if '@' in smile:
        mol = to_mol(smile)
        if mol is not None:
            Chem.rdmolops.RemoveStereochemistry(mol)
            smile = to_smile(mol)
        else:
            smile = ''
    return smile

# %% ../nbs/01_chem.ipynb 7
class Molecule():
    def __init__(self, smile, data=None):
        self.smile = canon_smile(smile)
        self.mol = to_mol(self.smile)
        self.valid = (self.mol is not None) and (self.smile != '')
        
        self.data = {}
        self.add_data(data)
            
    def add_data(self, data):
        if data is not None:
            self.data.update(data)

# %% ../nbs/01_chem.ipynb 8
class Reaction():
    def __init__(self, reaction_smarts):
        self.reaction_smarts = reaction_smarts
        self.reaction = AllChem.ReactionFromSmarts(self.reaction_smarts)
