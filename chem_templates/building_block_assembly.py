# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_building_block_assembly.ipynb.

# %% ../nbs/07_building_block_assembly.ipynb 3
from __future__ import annotations
from .imports import *
from .utils import *
from .building_blocks import Synthon, BuildingBlock, ReactionGroup, ReactionUniverse
from .template import Template, TemplateResult

# %% auto 0
__all__ = ['BuildingBlockNode', 'ReactionNode', 'SynthonNode', 'ProductNode']

# %% ../nbs/07_building_block_assembly.ipynb 4
class BuildingBlockNode():
    def __init__(self, name: str, template: Optional[Template]=None):
        self.name = name
        self.template = template
        
    def template_screen(self, synthon: Synthon, store_data: bool=True) -> TemplateResult:
        if self.template is not None:
            output = self.template(synthon)
        else:
            output = TemplateResult(True, [], [])
        
        if store_data:
            synthon.add_data({'template_data' : output, 'template_result' : output.result})
            
        return output

# %% ../nbs/07_building_block_assembly.ipynb 5
class ReactionNode(BuildingBlockNode):
    def __init__(self, name: str, reaction_universe: ReactionUniverse):
        super().__init__(name, None)
        self.reaction_universe = reaction_universe

# %% ../nbs/07_building_block_assembly.ipynb 6
class SynthonNode(BuildingBlockNode):
    def __init__(self, name: str, template: Optional[Template]=None):
        super().__init__(name, template)

# %% ../nbs/07_building_block_assembly.ipynb 7
class ProductNode(BuildingBlockNode):
    def __init__(self, 
                 name: str, 
                 incoming_node: Union[SynthonNode, ProductNode], 
                 reaction_node: ReactionNode,
                 next_node: Union[SynthonNode, ProductNode],
                 template: Optional[Template]=None
                ):
        super().__init__(name, template)
        
        self.incoming_node = incoming_node
        self.reaction_node = reaction_node
        self.next_node = next_node
