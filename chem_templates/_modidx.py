# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/chem_templates',
                'doc_host': 'https://DarkMatterAI.github.io',
                'git_url': 'https://github.com/DarkMatterAI/chem_templates',
                'lib_path': 'chem_templates'},
  'syms': { 'chem_templates.chem': { 'chem_templates.chem.Catalog': ('chem.html#catalog', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.__init__': ('chem.html#catalog.__init__', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.from_params': ('chem.html#catalog.from_params', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.from_smarts': ('chem.html#catalog.from_smarts', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.get_matches': ('chem.html#catalog.get_matches', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.has_match': ('chem.html#catalog.has_match', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Molecule': ('chem.html#molecule', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Molecule.__init__': ('chem.html#molecule.__init__', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Molecule.add_data': ('chem.html#molecule.add_data', 'chem_templates/chem.py'),
                                     'chem_templates.chem.canon_smile': ('chem.html#canon_smile', 'chem_templates/chem.py'),
                                     'chem_templates.chem.filter_valid_smiles': ('chem.html#filter_valid_smiles', 'chem_templates/chem.py'),
                                     'chem_templates.chem.mol_func_wrapper': ('chem.html#mol_func_wrapper', 'chem_templates/chem.py'),
                                     'chem_templates.chem.remove_stereo': ('chem.html#remove_stereo', 'chem_templates/chem.py'),
                                     'chem_templates.chem.remove_stereo_smile': ('chem.html#remove_stereo_smile', 'chem_templates/chem.py'),
                                     'chem_templates.chem.smile_func_wrapper': ('chem.html#smile_func_wrapper', 'chem_templates/chem.py'),
                                     'chem_templates.chem.to_kekule': ('chem.html#to_kekule', 'chem_templates/chem.py'),
                                     'chem_templates.chem.to_mol': ('chem.html#to_mol', 'chem_templates/chem.py'),
                                     'chem_templates.chem.to_smile': ('chem.html#to_smile', 'chem_templates/chem.py')},
            'chem_templates.filter': { 'chem_templates.filter.AttachmentCountFilter': ( 'filters.html#attachmentcountfilter',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.AttachmentCountFilter.__call__': ( 'filters.html#attachmentcountfilter.__call__',
                                                                                                 'chem_templates/filter.py'),
                                       'chem_templates.filter.AttachmentCountFilter.__init__': ( 'filters.html#attachmentcountfilter.__init__',
                                                                                                 'chem_templates/filter.py'),
                                       'chem_templates.filter.BinaryFunctionFilter': ( 'filters.html#binaryfunctionfilter',
                                                                                       'chem_templates/filter.py'),
                                       'chem_templates.filter.BinaryFunctionFilter.__call__': ( 'filters.html#binaryfunctionfilter.__call__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.BinaryFunctionFilter.__init__': ( 'filters.html#binaryfunctionfilter.__init__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter': ('filters.html#catalogfilter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter.__call__': ( 'filters.html#catalogfilter.__call__',
                                                                                         'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter.__init__': ( 'filters.html#catalogfilter.__init__',
                                                                                         'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter.has_match': ( 'filters.html#catalogfilter.has_match',
                                                                                          'chem_templates/filter.py'),
                                       'chem_templates.filter.DataFunctionFilter': ( 'filters.html#datafunctionfilter',
                                                                                     'chem_templates/filter.py'),
                                       'chem_templates.filter.DataFunctionFilter.__call__': ( 'filters.html#datafunctionfilter.__call__',
                                                                                              'chem_templates/filter.py'),
                                       'chem_templates.filter.DataFunctionFilter.__init__': ( 'filters.html#datafunctionfilter.__init__',
                                                                                              'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter': ('filters.html#filter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter.__call__': ( 'filters.html#filter.__call__',
                                                                                  'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter.__init__': ( 'filters.html#filter.__init__',
                                                                                  'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter.__repr__': ( 'filters.html#filter.__repr__',
                                                                                  'chem_templates/filter.py'),
                                       'chem_templates.filter.FilterResult': ('filters.html#filterresult', 'chem_templates/filter.py'),
                                       'chem_templates.filter.FilterResult.__init__': ( 'filters.html#filterresult.__init__',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.RangeFunctionFilter': ( 'filters.html#rangefunctionfilter',
                                                                                      'chem_templates/filter.py'),
                                       'chem_templates.filter.RangeFunctionFilter.__call__': ( 'filters.html#rangefunctionfilter.__call__',
                                                                                               'chem_templates/filter.py'),
                                       'chem_templates.filter.RangeFunctionFilter.__init__': ( 'filters.html#rangefunctionfilter.__init__',
                                                                                               'chem_templates/filter.py'),
                                       'chem_templates.filter.SingleCompoundFilter': ( 'filters.html#singlecompoundfilter',
                                                                                       'chem_templates/filter.py'),
                                       'chem_templates.filter.SingleCompoundFilter.__call__': ( 'filters.html#singlecompoundfilter.__call__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.SingleCompoundFilter.__init__': ( 'filters.html#singlecompoundfilter.__init__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter': ('filters.html#smartsfilter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter.__call__': ( 'filters.html#smartsfilter.__call__',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter.__init__': ( 'filters.html#smartsfilter.__init__',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter.has_match': ( 'filters.html#smartsfilter.has_match',
                                                                                         'chem_templates/filter.py'),
                                       'chem_templates.filter.ValidityFilter': ('filters.html#validityfilter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.ValidityFilter.__call__': ( 'filters.html#validityfilter.__call__',
                                                                                          'chem_templates/filter.py'),
                                       'chem_templates.filter.ValidityFilter.__init__': ( 'filters.html#validityfilter.__init__',
                                                                                          'chem_templates/filter.py')},
            'chem_templates.fragment': { 'chem_templates.fragment.add_fragment_mapping': ( 'fragments.html#add_fragment_mapping',
                                                                                           'chem_templates/fragment.py'),
                                         'chem_templates.fragment.clean_fragments': ( 'fragments.html#clean_fragments',
                                                                                      'chem_templates/fragment.py'),
                                         'chem_templates.fragment.combine_dummies': ( 'fragments.html#combine_dummies',
                                                                                      'chem_templates/fragment.py'),
                                         'chem_templates.fragment.flatten_fragments': ( 'fragments.html#flatten_fragments',
                                                                                        'chem_templates/fragment.py'),
                                         'chem_templates.fragment.fragment_mol': ( 'fragments.html#fragment_mol',
                                                                                   'chem_templates/fragment.py'),
                                         'chem_templates.fragment.fragment_molecule': ( 'fragments.html#fragment_molecule',
                                                                                        'chem_templates/fragment.py'),
                                         'chem_templates.fragment.fragment_smile': ( 'fragments.html#fragment_smile',
                                                                                     'chem_templates/fragment.py'),
                                         'chem_templates.fragment.fuse_mol_on_atom_mapping': ( 'fragments.html#fuse_mol_on_atom_mapping',
                                                                                               'chem_templates/fragment.py'),
                                         'chem_templates.fragment.fuse_smile_on_atom_mapping': ( 'fragments.html#fuse_smile_on_atom_mapping',
                                                                                                 'chem_templates/fragment.py'),
                                         'chem_templates.fragment.generate_mapping_permutations': ( 'fragments.html#generate_mapping_permutations',
                                                                                                    'chem_templates/fragment.py'),
                                         'chem_templates.fragment.get_dummy_mol': ( 'fragments.html#get_dummy_mol',
                                                                                    'chem_templates/fragment.py'),
                                         'chem_templates.fragment.is_mapped': ('fragments.html#is_mapped', 'chem_templates/fragment.py'),
                                         'chem_templates.fragment.regen_smiles': ( 'fragments.html#regen_smiles',
                                                                                   'chem_templates/fragment.py'),
                                         'chem_templates.fragment.remove_fragment_dummies': ( 'fragments.html#remove_fragment_dummies',
                                                                                              'chem_templates/fragment.py'),
                                         'chem_templates.fragment.remove_fragment_mapping': ( 'fragments.html#remove_fragment_mapping',
                                                                                              'chem_templates/fragment.py'),
                                         'chem_templates.fragment.shred_smiles': ( 'fragments.html#shred_smiles',
                                                                                   'chem_templates/fragment.py')},
            'chem_templates.fragment_assembly': { 'chem_templates.fragment_assembly.AssembledFragmentNode': ( 'fragment_assembly.html#assembledfragmentnode',
                                                                                                              'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.AssembledFragmentNode.__init__': ( 'fragment_assembly.html#assembledfragmentnode.__init__',
                                                                                                                       'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.AssembledFragmentNode.assemble': ( 'fragment_assembly.html#assembledfragmentnode.assemble',
                                                                                                                       'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.AssembledFragmentNode.build_dummy': ( 'fragment_assembly.html#assembledfragmentnode.build_dummy',
                                                                                                                          'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode': ( 'fragment_assembly.html#constantfragmentnode',
                                                                                                             'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode.__init__': ( 'fragment_assembly.html#constantfragmentnode.__init__',
                                                                                                                      'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode.assemble': ( 'fragment_assembly.html#constantfragmentnode.assemble',
                                                                                                                      'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode.build_dummy': ( 'fragment_assembly.html#constantfragmentnode.build_dummy',
                                                                                                                         'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode.match_and_map': ( 'fragment_assembly.html#constantfragmentnode.match_and_map',
                                                                                                                           'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode.match_mapped_fragment': ( 'fragment_assembly.html#constantfragmentnode.match_mapped_fragment',
                                                                                                                                   'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.ConstantFragmentNode.match_unmapped_fragment': ( 'fragment_assembly.html#constantfragmentnode.match_unmapped_fragment',
                                                                                                                                     'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentLeafNode': ( 'fragment_assembly.html#fragmentleafnode',
                                                                                                         'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentLeafNode.__init__': ( 'fragment_assembly.html#fragmentleafnode.__init__',
                                                                                                                  'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentLeafNode.assemble': ( 'fragment_assembly.html#fragmentleafnode.assemble',
                                                                                                                  'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentLeafNode.build_dummy': ( 'fragment_assembly.html#fragmentleafnode.build_dummy',
                                                                                                                     'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentLeafNode.match_and_map': ( 'fragment_assembly.html#fragmentleafnode.match_and_map',
                                                                                                                       'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode': ( 'fragment_assembly.html#fragmentnode',
                                                                                                     'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.__init__': ( 'fragment_assembly.html#fragmentnode.__init__',
                                                                                                              'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.__repr__': ( 'fragment_assembly.html#fragmentnode.__repr__',
                                                                                                              'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.build_dummies': ( 'fragment_assembly.html#fragmentnode.build_dummies',
                                                                                                                   'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.build_dummy': ( 'fragment_assembly.html#fragmentnode.build_dummy',
                                                                                                                 'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.build_ids': ( 'fragment_assembly.html#fragmentnode.build_ids',
                                                                                                               'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.fragment_screen': ( 'fragment_assembly.html#fragmentnode.fragment_screen',
                                                                                                                     'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.get_leaf_nodes': ( 'fragment_assembly.html#fragmentnode.get_leaf_nodes',
                                                                                                                    'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.match_mapped_fragment': ( 'fragment_assembly.html#fragmentnode.match_mapped_fragment',
                                                                                                                           'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.match_unmapped_fragment': ( 'fragment_assembly.html#fragmentnode.match_unmapped_fragment',
                                                                                                                             'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.repr_swap': ( 'fragment_assembly.html#fragmentnode.repr_swap',
                                                                                                               'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.FragmentNode.template_screen': ( 'fragment_assembly.html#fragmentnode.template_screen',
                                                                                                                     'chem_templates/fragment_assembly.py'),
                                                  'chem_templates.fragment_assembly.visualize_assembly': ( 'fragment_assembly.html#visualize_assembly',
                                                                                                           'chem_templates/fragment_assembly.py')},
            'chem_templates.imports': {},
            'chem_templates.template': { 'chem_templates.template.Template': ('template.html#template', 'chem_templates/template.py'),
                                         'chem_templates.template.Template.__call__': ( 'template.html#template.__call__',
                                                                                        'chem_templates/template.py'),
                                         'chem_templates.template.Template.__init__': ( 'template.html#template.__init__',
                                                                                        'chem_templates/template.py'),
                                         'chem_templates.template.Template._empty_result': ( 'template.html#template._empty_result',
                                                                                             'chem_templates/template.py'),
                                         'chem_templates.template.TemplateResult': ( 'template.html#templateresult',
                                                                                     'chem_templates/template.py'),
                                         'chem_templates.template.TemplateResult.__init__': ( 'template.html#templateresult.__init__',
                                                                                              'chem_templates/template.py')},
            'chem_templates.utils': { 'chem_templates.utils.deduplicate_list': ('utils.html#deduplicate_list', 'chem_templates/utils.py'),
                                      'chem_templates.utils.flatten_list': ('utils.html#flatten_list', 'chem_templates/utils.py'),
                                      'chem_templates.utils.validate_range': ('utils.html#validate_range', 'chem_templates/utils.py')}}}
