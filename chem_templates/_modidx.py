# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/chem_templates',
                'doc_host': 'https://DarkMatterAI.github.io',
                'git_url': 'https://github.com/DarkMatterAI/chem_templates',
                'lib_path': 'chem_templates'},
  'syms': { 'chem_templates.assembly': { 'chem_templates.assembly.AssemblyInputs': ( 'assembly.html#assemblyinputs',
                                                                                     'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyInputs.__init__': ( 'assembly.html#assemblyinputs.__init__',
                                                                                              'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyPool': ( 'assembly.html#assemblypool',
                                                                                   'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyPool.__getitem__': ( 'assembly.html#assemblypool.__getitem__',
                                                                                               'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyPool.__init__': ( 'assembly.html#assemblypool.__init__',
                                                                                            'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyPool.__len__': ( 'assembly.html#assemblypool.__len__',
                                                                                           'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyPool.__repr__': ( 'assembly.html#assemblypool.__repr__',
                                                                                            'chem_templates/assembly.py'),
                                         'chem_templates.assembly.AssemblyPool.filter': ( 'assembly.html#assemblypool.filter',
                                                                                          'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentLeafNode': ( 'assembly.html#fragmentleafnode',
                                                                                       'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentLeafNode.__init__': ( 'assembly.html#fragmentleafnode.__init__',
                                                                                                'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentLeafNode.assemble': ( 'assembly.html#fragmentleafnode.assemble',
                                                                                                'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentLeafNode.build_dummy': ( 'assembly.html#fragmentleafnode.build_dummy',
                                                                                                   'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode': ( 'assembly.html#fragmentnode',
                                                                                   'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.__init__': ( 'assembly.html#fragmentnode.__init__',
                                                                                            'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.__repr__': ( 'assembly.html#fragmentnode.__repr__',
                                                                                            'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode._fuse': ( 'assembly.html#fragmentnode._fuse',
                                                                                         'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.assemble': ( 'assembly.html#fragmentnode.assemble',
                                                                                            'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.assembly_iterator': ( 'assembly.html#fragmentnode.assembly_iterator',
                                                                                                     'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.build_assembly_pools': ( 'assembly.html#fragmentnode.build_assembly_pools',
                                                                                                        'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.build_dummies': ( 'assembly.html#fragmentnode.build_dummies',
                                                                                                 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.build_dummy': ( 'assembly.html#fragmentnode.build_dummy',
                                                                                               'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.build_ids': ( 'assembly.html#fragmentnode.build_ids',
                                                                                             'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.grab_leaf_nodes': ( 'assembly.html#fragmentnode.grab_leaf_nodes',
                                                                                                   'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.map_and_screen': ( 'assembly.html#fragmentnode.map_and_screen',
                                                                                                  'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.map_molecule_to_leaf_nodes': ( 'assembly.html#fragmentnode.map_molecule_to_leaf_nodes',
                                                                                                              'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.repr_swap': ( 'assembly.html#fragmentnode.repr_swap',
                                                                                             'chem_templates/assembly.py'),
                                         'chem_templates.assembly.FragmentNode.template_screen': ( 'assembly.html#fragmentnode.template_screen',
                                                                                                   'chem_templates/assembly.py'),
                                         'chem_templates.assembly.Node': ('assembly.html#node', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.Node.__init__': ( 'assembly.html#node.__init__',
                                                                                    'chem_templates/assembly.py'),
                                         'chem_templates.assembly.Node._fuse': ('assembly.html#node._fuse', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.Node.fuse': ('assembly.html#node.fuse', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.Node.template_screen': ( 'assembly.html#node.template_screen',
                                                                                           'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonLeafNode': ( 'assembly.html#synthonleafnode',
                                                                                      'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonLeafNode.__init__': ( 'assembly.html#synthonleafnode.__init__',
                                                                                               'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonLeafNode.__repr__': ( 'assembly.html#synthonleafnode.__repr__',
                                                                                               'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonLeafNode.assemble': ( 'assembly.html#synthonleafnode.assemble',
                                                                                               'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode': ('assembly.html#synthonnode', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.__init__': ( 'assembly.html#synthonnode.__init__',
                                                                                           'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.__repr__': ( 'assembly.html#synthonnode.__repr__',
                                                                                           'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode._fuse': ( 'assembly.html#synthonnode._fuse',
                                                                                        'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.assemble': ( 'assembly.html#synthonnode.assemble',
                                                                                           'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.build_assembly_pools': ( 'assembly.html#synthonnode.build_assembly_pools',
                                                                                                       'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.fuse': ( 'assembly.html#synthonnode.fuse',
                                                                                       'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.grab_leaf_nodes': ( 'assembly.html#synthonnode.grab_leaf_nodes',
                                                                                                  'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.map_molecule_to_leaf_nodes': ( 'assembly.html#synthonnode.map_molecule_to_leaf_nodes',
                                                                                                             'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.reaction_screen': ( 'assembly.html#synthonnode.reaction_screen',
                                                                                                  'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonNode.template_screen': ( 'assembly.html#synthonnode.template_screen',
                                                                                                  'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonPool': ('assembly.html#synthonpool', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonPool.__init__': ( 'assembly.html#synthonpool.__init__',
                                                                                           'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonPool.filter': ( 'assembly.html#synthonpool.filter',
                                                                                         'chem_templates/assembly.py'),
                                         'chem_templates.assembly.SynthonPool.get_matching': ( 'assembly.html#synthonpool.get_matching',
                                                                                               'chem_templates/assembly.py'),
                                         'chem_templates.assembly.add_rxn': ('assembly.html#add_rxn', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.make_assemblies': ( 'assembly.html#make_assemblies',
                                                                                      'chem_templates/assembly.py'),
                                         'chem_templates.assembly.make_pairs': ('assembly.html#make_pairs', 'chem_templates/assembly.py'),
                                         'chem_templates.assembly.make_pairs_chunked': ( 'assembly.html#make_pairs_chunked',
                                                                                         'chem_templates/assembly.py')},
            'chem_templates.building_blocks': { 'chem_templates.building_blocks.FusionReaction': ( 'building_blocks.html#fusionreaction',
                                                                                                   'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.FusionReaction.__init__': ( 'building_blocks.html#fusionreaction.__init__',
                                                                                                            'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.FusionReaction.__repr__': ( 'building_blocks.html#fusionreaction.__repr__',
                                                                                                            'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.FusionReaction._react': ( 'building_blocks.html#fusionreaction._react',
                                                                                                          'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.FusionReaction.is_reactant': ( 'building_blocks.html#fusionreaction.is_reactant',
                                                                                                               'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.FusionReaction.react': ( 'building_blocks.html#fusionreaction.react',
                                                                                                         'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.FusionReaction.react_to_dict': ( 'building_blocks.html#fusionreaction.react_to_dict',
                                                                                                                 'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup': ( 'building_blocks.html#reactiongroup',
                                                                                                  'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup.__init__': ( 'building_blocks.html#reactiongroup.__init__',
                                                                                                           'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup.__repr__': ( 'building_blocks.html#reactiongroup.__repr__',
                                                                                                           'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup.dump': ( 'building_blocks.html#reactiongroup.dump',
                                                                                                       'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup.from_dict': ( 'building_blocks.html#reactiongroup.from_dict',
                                                                                                            'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup.from_file': ( 'building_blocks.html#reactiongroup.from_file',
                                                                                                            'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionGroup.get_matching_reactions': ( 'building_blocks.html#reactiongroup.get_matching_reactions',
                                                                                                                         'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionUniverse': ( 'building_blocks.html#reactionuniverse',
                                                                                                     'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionUniverse.__init__': ( 'building_blocks.html#reactionuniverse.__init__',
                                                                                                              'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionUniverse.add_group': ( 'building_blocks.html#reactionuniverse.add_group',
                                                                                                               'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.ReactionUniverse.get_matching_reactions': ( 'building_blocks.html#reactionuniverse.get_matching_reactions',
                                                                                                                            'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.Synthon': ( 'building_blocks.html#synthon',
                                                                                            'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.Synthon.__init__': ( 'building_blocks.html#synthon.__init__',
                                                                                                     'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.Synthon.is_compatible': ( 'building_blocks.html#synthon.is_compatible',
                                                                                                          'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.add_reconstruction_atoms': ( 'building_blocks.html#add_reconstruction_atoms',
                                                                                                             'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.get_synthon_marks': ( 'building_blocks.html#get_synthon_marks',
                                                                                                      'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.molecule_to_synthon': ( 'building_blocks.html#molecule_to_synthon',
                                                                                                        'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.remove_reconstruction_atoms': ( 'building_blocks.html#remove_reconstruction_atoms',
                                                                                                                'chem_templates/building_blocks.py'),
                                                'chem_templates.building_blocks.smile_to_synthon': ( 'building_blocks.html#smile_to_synthon',
                                                                                                     'chem_templates/building_blocks.py')},
            'chem_templates.chem': { 'chem_templates.chem.Catalog': ('chem.html#catalog', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.__init__': ('chem.html#catalog.__init__', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.from_params': ('chem.html#catalog.from_params', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.from_smarts': ('chem.html#catalog.from_smarts', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.get_matches': ('chem.html#catalog.get_matches', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Catalog.has_match': ('chem.html#catalog.has_match', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Molecule': ('chem.html#molecule', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Molecule.__init__': ('chem.html#molecule.__init__', 'chem_templates/chem.py'),
                                     'chem_templates.chem.Molecule.add_data': ('chem.html#molecule.add_data', 'chem_templates/chem.py'),
                                     'chem_templates.chem.canon_smile': ('chem.html#canon_smile', 'chem_templates/chem.py'),
                                     'chem_templates.chem.filter_valid_smiles': ('chem.html#filter_valid_smiles', 'chem_templates/chem.py'),
                                     'chem_templates.chem.mol_func_wrapper': ('chem.html#mol_func_wrapper', 'chem_templates/chem.py'),
                                     'chem_templates.chem.remove_stereo': ('chem.html#remove_stereo', 'chem_templates/chem.py'),
                                     'chem_templates.chem.remove_stereo_smile': ('chem.html#remove_stereo_smile', 'chem_templates/chem.py'),
                                     'chem_templates.chem.smile_func_wrapper': ('chem.html#smile_func_wrapper', 'chem_templates/chem.py'),
                                     'chem_templates.chem.to_kekule': ('chem.html#to_kekule', 'chem_templates/chem.py'),
                                     'chem_templates.chem.to_mol': ('chem.html#to_mol', 'chem_templates/chem.py'),
                                     'chem_templates.chem.to_smile': ('chem.html#to_smile', 'chem_templates/chem.py')},
            'chem_templates.filter': { 'chem_templates.filter.AttachmentCountFilter': ( 'filters.html#attachmentcountfilter',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.AttachmentCountFilter.__call__': ( 'filters.html#attachmentcountfilter.__call__',
                                                                                                 'chem_templates/filter.py'),
                                       'chem_templates.filter.AttachmentCountFilter.__init__': ( 'filters.html#attachmentcountfilter.__init__',
                                                                                                 'chem_templates/filter.py'),
                                       'chem_templates.filter.BinaryFunctionFilter': ( 'filters.html#binaryfunctionfilter',
                                                                                       'chem_templates/filter.py'),
                                       'chem_templates.filter.BinaryFunctionFilter.__call__': ( 'filters.html#binaryfunctionfilter.__call__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.BinaryFunctionFilter.__init__': ( 'filters.html#binaryfunctionfilter.__init__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter': ('filters.html#catalogfilter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter.__call__': ( 'filters.html#catalogfilter.__call__',
                                                                                         'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter.__init__': ( 'filters.html#catalogfilter.__init__',
                                                                                         'chem_templates/filter.py'),
                                       'chem_templates.filter.CatalogFilter.has_match': ( 'filters.html#catalogfilter.has_match',
                                                                                          'chem_templates/filter.py'),
                                       'chem_templates.filter.DataFunctionFilter': ( 'filters.html#datafunctionfilter',
                                                                                     'chem_templates/filter.py'),
                                       'chem_templates.filter.DataFunctionFilter.__call__': ( 'filters.html#datafunctionfilter.__call__',
                                                                                              'chem_templates/filter.py'),
                                       'chem_templates.filter.DataFunctionFilter.__init__': ( 'filters.html#datafunctionfilter.__init__',
                                                                                              'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter': ('filters.html#filter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter.__call__': ( 'filters.html#filter.__call__',
                                                                                  'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter.__init__': ( 'filters.html#filter.__init__',
                                                                                  'chem_templates/filter.py'),
                                       'chem_templates.filter.Filter.__repr__': ( 'filters.html#filter.__repr__',
                                                                                  'chem_templates/filter.py'),
                                       'chem_templates.filter.FilterResult': ('filters.html#filterresult', 'chem_templates/filter.py'),
                                       'chem_templates.filter.FilterResult.__init__': ( 'filters.html#filterresult.__init__',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.RangeFunctionFilter': ( 'filters.html#rangefunctionfilter',
                                                                                      'chem_templates/filter.py'),
                                       'chem_templates.filter.RangeFunctionFilter.__call__': ( 'filters.html#rangefunctionfilter.__call__',
                                                                                               'chem_templates/filter.py'),
                                       'chem_templates.filter.RangeFunctionFilter.__init__': ( 'filters.html#rangefunctionfilter.__init__',
                                                                                               'chem_templates/filter.py'),
                                       'chem_templates.filter.SingleCompoundFilter': ( 'filters.html#singlecompoundfilter',
                                                                                       'chem_templates/filter.py'),
                                       'chem_templates.filter.SingleCompoundFilter.__call__': ( 'filters.html#singlecompoundfilter.__call__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.SingleCompoundFilter.__init__': ( 'filters.html#singlecompoundfilter.__init__',
                                                                                                'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter': ('filters.html#smartsfilter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter.__call__': ( 'filters.html#smartsfilter.__call__',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter.__init__': ( 'filters.html#smartsfilter.__init__',
                                                                                        'chem_templates/filter.py'),
                                       'chem_templates.filter.SmartsFilter.has_match': ( 'filters.html#smartsfilter.has_match',
                                                                                         'chem_templates/filter.py'),
                                       'chem_templates.filter.ValidityFilter': ('filters.html#validityfilter', 'chem_templates/filter.py'),
                                       'chem_templates.filter.ValidityFilter.__call__': ( 'filters.html#validityfilter.__call__',
                                                                                          'chem_templates/filter.py'),
                                       'chem_templates.filter.ValidityFilter.__init__': ( 'filters.html#validityfilter.__init__',
                                                                                          'chem_templates/filter.py')},
            'chem_templates.fragments': { 'chem_templates.fragments.add_fragment_mapping': ( 'fragments.html#add_fragment_mapping',
                                                                                             'chem_templates/fragments.py'),
                                          'chem_templates.fragments.clean_fragments': ( 'fragments.html#clean_fragments',
                                                                                        'chem_templates/fragments.py'),
                                          'chem_templates.fragments.combine_dummies': ( 'fragments.html#combine_dummies',
                                                                                        'chem_templates/fragments.py'),
                                          'chem_templates.fragments.fragment_smile': ( 'fragments.html#fragment_smile',
                                                                                       'chem_templates/fragments.py'),
                                          'chem_templates.fragments.fuse_mol_on_atom_mapping': ( 'fragments.html#fuse_mol_on_atom_mapping',
                                                                                                 'chem_templates/fragments.py'),
                                          'chem_templates.fragments.fuse_smile_on_atom_mapping': ( 'fragments.html#fuse_smile_on_atom_mapping',
                                                                                                   'chem_templates/fragments.py'),
                                          'chem_templates.fragments.generate_mapping_permutations': ( 'fragments.html#generate_mapping_permutations',
                                                                                                      'chem_templates/fragments.py'),
                                          'chem_templates.fragments.get_dummy_mol': ( 'fragments.html#get_dummy_mol',
                                                                                      'chem_templates/fragments.py'),
                                          'chem_templates.fragments.is_mapped': ('fragments.html#is_mapped', 'chem_templates/fragments.py'),
                                          'chem_templates.fragments.match_and_map': ( 'fragments.html#match_and_map',
                                                                                      'chem_templates/fragments.py'),
                                          'chem_templates.fragments.match_mapping': ( 'fragments.html#match_mapping',
                                                                                      'chem_templates/fragments.py'),
                                          'chem_templates.fragments.remove_fragment_mapping': ( 'fragments.html#remove_fragment_mapping',
                                                                                                'chem_templates/fragments.py'),
                                          'chem_templates.fragments.shred_smiles': ( 'fragments.html#shred_smiles',
                                                                                     'chem_templates/fragments.py')},
            'chem_templates.imports': {},
            'chem_templates.synt_on.src.SyntOn_BBs': {},
            'chem_templates.synt_on.src.SyntOn_Classifier': {},
            'chem_templates.synt_on.src.UsefulFunctions': {},
            'chem_templates.template': { 'chem_templates.template.Template': ('template.html#template', 'chem_templates/template.py'),
                                         'chem_templates.template.Template.__call__': ( 'template.html#template.__call__',
                                                                                        'chem_templates/template.py'),
                                         'chem_templates.template.Template.__init__': ( 'template.html#template.__init__',
                                                                                        'chem_templates/template.py'),
                                         'chem_templates.template.Template._empty_result': ( 'template.html#template._empty_result',
                                                                                             'chem_templates/template.py'),
                                         'chem_templates.template.TemplateResult': ( 'template.html#templateresult',
                                                                                     'chem_templates/template.py'),
                                         'chem_templates.template.TemplateResult.__init__': ( 'template.html#templateresult.__init__',
                                                                                              'chem_templates/template.py')},
            'chem_templates.utils': { 'chem_templates.utils.deduplicate_list': ('utils.html#deduplicate_list', 'chem_templates/utils.py'),
                                      'chem_templates.utils.flatten_list': ('utils.html#flatten_list', 'chem_templates/utils.py'),
                                      'chem_templates.utils.validate_range': ('utils.html#validate_range', 'chem_templates/utils.py')}}}
